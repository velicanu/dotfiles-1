#!/usr/bin/bash
# git_bash
# set of functions to print git info in PS1.
# copied from:
# Sexy bash prompt by twolfson
# https://github.com/twolfson/sexy-bash-prompt

function get_git_branch() {
    # On branches, this will return the branch name
    # On non-branches, (no branch)
    ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
    if [[ "$ref" != "" ]]; then
	echo "$ref"
    else
	echo ""
    fi
}

function get_remote_branch() {
    #git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)
    LOCAL_BRANCH="$(get_git_branch)"
    TRACKING_BRANCH="$(git config branch.${LOCAL_BRANCH}.merge)"
    if [[ $TRACKING_BRANCH != "" ]]; then
	TRACKING_REMOTE="$(git config branch.$LOCAL_BRANCH.remote)"
	echo "${TRACKING_REMOTE}/$(basename $TRACKING_BRANCH)"
    fi
}

function is_branch1_behind_branch2 () {
    # Find the first log (if any) that is in branch1 but not branch2
    FIRST_LOG="$(git log $1..$2 -1 2> /dev/null)"

    # Exit with 0 if there is a first log, 1 if there is not
    [[ -n "$FIRST_LOG" ]]
}

function branch_exists () {
    # List remote branches | # Find our branch and exit with 0 or 1 if found/not found
    git branch --remote 2> /dev/null | grep --quiet "$1"
}

function parse_git_ahead () {
    # Grab the local and remote branch
    BRANCH="$(get_git_branch)"
    REMOTE_BRANCH="$(get_remote_branch)"

    # If the remote branch is behind the local branch
    # or it has not been merged into origin (remote branch doesn't exist)
    if (! branch_exists "$REMOTE_BRANCH" ||
	    is_branch1_behind_branch2 "$REMOTE_BRANCH" "$BRANCH"); then
	# echo our character
	echo 1
    fi
}

function parse_git_behind () {
    # Grab the branch
    BRANCH="$(get_git_branch)"
    REMOTE_BRANCH="$(get_remote_branch)"

    # If the local branch is behind the remote branch
    if (branch_exists "$REMOTE_BRANCH" &&
	    is_branch1_behind_branch2 "$BRANCH" "$REMOTE_BRANCH"); then
	# echo our character
	echo 1
    fi
}

function parse_git_dirty () {
    # If the git status has *any* changes (i.e. dirty)
    if [[ -n "$(git status --porcelain 2> /dev/null)" ]]; then
	# echo our character
	echo 1
    fi
}

function get_git_status() {
    # Grab the git dirty and git behind
    DIRTY_BRANCH="$(parse_git_dirty)"
    BRANCH_AHEAD="$(parse_git_ahead)"
    BRANCH_BEHIND="$(parse_git_behind)"

    # Iterate through all the cases and if it matches, then echo
    if [[ "$DIRTY_BRANCH" == 1 && "$BRANCH_AHEAD" == 1 && "$BRANCH_BEHIND" == 1 ]]; then
	echo "<*>"
    elif [[ "$DIRTY_BRANCH" == 1 && "$BRANCH_AHEAD" == 1 ]]; then
	echo "*>"
    elif [[ "$DIRTY_BRANCH" == 1 && "$BRANCH_BEHIND" == 1 ]]; then
	echo "<*"
    elif [[ "$BRANCH_AHEAD" == 1 && "$BRANCH_BEHIND" == 1 ]]; then
	echo "<>"
    elif [[ "$BRANCH_AHEAD" == 1 ]]; then
	echo ">"
    elif [[ "$BRANCH_BEHIND" == 1 ]]; then
	echo "<"
    elif [[ "$DIRTY_BRANCH" == 1 ]]; then
	echo "*"
    fi
}

function get_git_info () {
    # Grab the branch
    BRANCH="$(get_git_branch)"

    # If there are any branches
    if [[ "$BRANCH" != "" ]]; then
	# Echo the branch
	OUTPUT="$BRANCH"

	# Add on the git status
	# OUTPUT="$OUTPUT $(get_git_status)"

	# Echo our output
	echo "$OUTPUT"
    fi
}
